buildscript {
    repositories {
        maven { url = "https://maven.minecraftforge.net" }
        maven { url = "https://repo.spongepowered.org/maven" }
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
apply plugin: "net.minecraftforge.gradle"
apply plugin: 'org.spongepowered.mixin'

archivesBaseName = "${modname}-${mcversion}-forge"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println("Java: " + System.getProperty("java.version") + " JVM: " + System.getProperty("java.vm.version") + "(" + System.getProperty("java.vendor") + ") Arch: " + System.getProperty("os.arch"))
minecraft {
    mappings channel: "official", version: mcversion

    runs {
        client {
            workingDirectory project.file("run")
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName "Client"

            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            property "forge.enabledGameTestNamespaces", modid

            mods {
                "${modid}" {
                    source sourceSets.main
                    source project(":shared").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("run")
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName "Server"

            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            property "forge.enabledGameTestNamespaces", modid

            mods {
                "${modid}" {
                    source sourceSets.main
                    source project(":shared").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file("run")
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName "Data"

            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args "--mod", modid, "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")

            mods {
                "${modid}" {
                    source sourceSets.main
                    source project(":shared").sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir "src/generated/resources" }

repositories {
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url "https://maven.bai.lol" }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcversion}-${forgeversion}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation project(":shared")

    runtimeOnly fg.deobf("curse.maven:treechop-421377:4426533")
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    source(project(":shared").sourceSets.main.allSource)
}

processResources {
    from project(":shared").sourceSets.main.resources
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy("reobfJar")
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn("reobfJar")
